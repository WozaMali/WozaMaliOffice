// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type PagesPageConfig = {
  default: React.ComponentType<any> | ((props: any) => React.ReactNode | Promise<React.ReactNode> | never | void)
  getStaticProps?: (context: any) => Promise<any> | any
  getStaticPaths?: (context: any) => Promise<any> | any
  getServerSideProps?: (context: any) => Promise<any> | any
  getInitialProps?: (context: any) => Promise<any> | any
  /**
   * Segment configuration for legacy Pages Router pages.
   * Validated at build-time by parsePagesSegmentConfig.
   */
  config?: {
    amp?: boolean | 'hybrid' | string // necessary for JS
    maxDuration?: number
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    regions?: string[]
  }
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}


// Validate ..\..\app\admin\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\admin\\page.js")
  handler satisfies AppPageConfig<"/admin">
}

// Validate ..\..\app\calculator\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\calculator\\page.js")
  handler satisfies AppPageConfig<"/calculator">
}

// Validate ..\..\app\collector\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\collector\\page.js")
  handler satisfies AppPageConfig<"/collector">
}

// Validate ..\..\app\collector\test-connection\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\collector\\test-connection\\page.js")
  handler satisfies AppPageConfig<"/collector/test-connection">
}

// Validate ..\..\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}



// Validate ..\..\src\pages\AdminAnalytics.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\AdminAnalytics.js")
  handler satisfies PagesPageConfig
}

// Validate ..\..\src\pages\AdminCollections.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\AdminCollections.js")
  handler satisfies PagesPageConfig
}

// Validate ..\..\src\pages\AdminConfig.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\AdminConfig.js")
  handler satisfies PagesPageConfig
}

// Validate ..\..\src\pages\AdminDashboard.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\AdminDashboard.js")
  handler satisfies PagesPageConfig
}

// Validate ..\..\src\pages\AdminFund.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\AdminFund.js")
  handler satisfies PagesPageConfig
}

// Validate ..\..\src\pages\AdminPickups.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\AdminPickups.js")
  handler satisfies PagesPageConfig
}

// Validate ..\..\src\pages\AdminRewards.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\AdminRewards.js")
  handler satisfies PagesPageConfig
}

// Validate ..\..\src\pages\AdminUsers.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\AdminUsers.js")
  handler satisfies PagesPageConfig
}

// Validate ..\..\src\pages\AdminWithdrawals.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\AdminWithdrawals.js")
  handler satisfies PagesPageConfig
}

// Validate ..\..\src\pages\RecyclingCalculatorPage.tsx
{
  const handler = {} as typeof import("..\\..\\src\\pages\\RecyclingCalculatorPage.js")
  handler satisfies PagesPageConfig
}



// Validate ..\..\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
